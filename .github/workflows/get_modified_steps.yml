name: detect-modified-steps

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'flows/steps/**'

jobs:
  check-modified-folders:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Find modified folders
        id: modified-folders
        run: |
          # Fetch the modified folders between the base and head commits
          MODIFIED_FOLDERS=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} flows/steps/ | cut -d'/' -f3 | sort | uniq | grep -v '^$' || true)
          
          echo "DEBUG: Raw MODIFIED_FOLDERS content:"
          echo "$MODIFIED_FOLDERS"

          # If no modified folders are found, set an empty list and exit
          if [ -z "$MODIFIED_FOLDERS" ]; then
            echo "folders=[]" >> $GITHUB_OUTPUT
            echo "No modified folders found"
            exit 0
          fi

          # Convert the list of folders (with newlines) into a JSON array
          FOLDERS_JSON=$(echo "$MODIFIED_FOLDERS" | jq -R . | jq -s . | jq -c .)
          
          # Output the folders as JSON to GitHub Actions output
          echo "folders=${FOLDERS_JSON}" >> $GITHUB_OUTPUT
          echo "DEBUG: Modified folders: ${FOLDERS_JSON}"




      - name: Set up Python
        if: fromJSON(steps.modified-folders.outputs.folders) != '[]'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        if: fromJSON(steps.modified-folders.outputs.folders) != '[]'
        run: |
          python -m pip install --upgrade pip
          pip install requests
          pip install semver

      - name: Process Docker tags
        if: fromJSON(steps.modified-folders.outputs.folders) != '[]'
        id: get-latest-tag
        run: |
          python .github/scripts/get_latest_tags.py
          
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          MODIFIED_FOLDERS: ${{ steps.modified-folders.outputs.folders }}
          

      - name: Create Comment with Steps and Tags
        uses: actions/github-script@v6
        with:
          script: |
            const tags = JSON.parse(process.env.TAG_MAP || '[]');

            let comment = '## Modified Steps Check\n\n';

            // Add tags section with formatting
            comment += '\n### Steps and Tags with Version Bump Options:\n$START\n';

            if (tags.length > 0) {
              tags.forEach(([step, currentTag]) => {
                comment += `${step} | [${currentTag}]\t[PATCH|MAJOR|MINOR|x.x.x]\n`;
              });
            } else {
              comment += '_No matching tags found_\n';
            }

            comment += '\n$END\n⚠️ Please review these changes carefully before merging.';
            comment += '\nSet either PATCH, MAJOR or MINOR or a specific version in the format x.x.x\n';
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
        env:
          TAG_MAP: ${{ env.TAG_MAP }}
