name: Detect Modified Steps

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'flows/steps/**'  

jobs:
  check-modified-folders:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper diff
      
      - name: Find modified folders
        id: modified-folders
        run: |
          # Get modified folders in steps directory
          MODIFIED_FOLDERS=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} flows/steps/ | cut -d'/' -f3 | sort | uniq)
          
          # Convert to JSON array for better handling
          FOLDERS_JSON=$(echo "$MODIFIED_FOLDERS" | jq -R -s -c 'split("\n")[:-1]')
          echo "folders=$FOLDERS_JSON" >> $GITHUB_OUTPUT
          
          # For debugging
          echo "Modified folders: $FOLDERS_JSON"

      - name: Login to Docker Hub
        if: steps.modified-folders.outputs.folders != '[]'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PWD }}

      - name: Get matching Docker images
        if: fromJSON(steps.modified-folders.outputs.folders) != '[]'
        id: find-images
        shell: bash
        run: |
          # Initialize empty array for results
          declare -a MATCHING_IMAGES
          
          # Process folders from JSON array
          FOLDERS=$(echo '${{ steps.modified-folders.outputs.folders }}' | jq -r '.[]' 2>/dev/null || echo '')
          
          while IFS= read -r folder; do
            [ -z "$folder" ] && continue
            
            IMAGE_NAME="${{ secrets.DOCKER_USER }}/$folder"
            echo "Checking image: $IMAGE_NAME"
            
            LATEST_TAG=$(curl -s -H "Authorization: Bearer ${{ secrets.DOCKER_PWD }}" \
              "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USER }}/$folder/tags?page_size=1&ordering=last_updated" \
              | jq -r '.results[0].name // empty' 2>/dev/null || echo '')
            
            if [ -n "$LATEST_TAG" ]; then
              MATCHING_IMAGES+=("$IMAGE_NAME:$LATEST_TAG")
              echo "Found image: $IMAGE_NAME:$LATEST_TAG"
            fi
          done <<< "$FOLDERS"
          
          # Create JSON array of arrays using jq
           if [ -s "$temp_file" ]; then
            # Convert file content to JSON array of arrays
            STEPS_JSON=$(cat "$temp_file" | jq -R -s 'split("\n")[:-1] | map(fromjson)')
            echo "steps=${STEPS_JSON}" >> $GITHUB_OUTPUT
            echo "DEBUG: Steps and tags: ${STEPS_JSON}"
          else
            echo "steps=[]" >> $GITHUB_OUTPUT
            echo "DEBUG: No matching steps found"
          fi
          
          # Clean up temporary file
          echo "DEBUG: Final images JSON: ${IMAGES_JSON:-[]}"
          rm "$temp_file"
          
          

      - name: Create PR Comment
        if: fromJSON(steps.modified-folders.outputs.folders) != '[]'
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const folders = ${{ steps.modified-folders.outputs.folders }};
              const images = ${{ steps.find-images.outputs.matching_images || '[]' }};
              
              let comment = '## Modified Steps Check\n\n';
              
              // Add folders section
              comment += '### Modified Folders:\n';
              if (folders && folders.length > 0) {
                folders.forEach(folder => {
                  comment += `- \`${folder}\`\n`;
                });
              } else {
                comment += '_No modified folders found_\n';
              }
              
              // Add images section
              comment += '\n### Docker Images:\n';
              if (images && images.length > 0) {
                images.forEach(image => {
                  comment += `- \`${image}\`\n`;
                });
              } else {
                comment += '_No matching Docker images found_\n';
              }
              
              comment += '\n⚠️ Please review these changes carefully before merging.';
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            } catch (error) {
              core.setFailed(`Action failed with error: ${error}`);
              console.log('Error details:', error);
            }
