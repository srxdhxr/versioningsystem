name: Get PR Comment and Run Python Script

on:
  push:
    branches:
      - main

jobs:
  get-pr-comment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get PR number from commit SHA
        id: get-pr
        uses: actions/github-script@v6
        with:
          script: |
            const sha = process.env.GITHUB_SHA; // Get the current commit SHA
            const { data: pullRequests } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: sha,
            });

            if (pullRequests.length === 0) {
              throw new Error(`No pull requests associated with commit SHA ${sha}`);
            }

            // Take the first PR in case there are multiple
            const prNumber = pullRequests[0].number;
            console.log(`Found PR number: ${prNumber}`);
            // Set the PR number as an environment variable
            console.log(`PR_NUMBER=${prNumber}`); // Debug log
            core.exportVariable('PR_NUMBER', prNumber);

      - name: Get latest comment from GitHub Actions bot
        uses: actions/github-script@v6
        env:
          PR_NUMBER: ${{ env.PR_NUMBER }}  # Passing the PR number as env variable
        with:
          script: |
            const prNumber = process.env.PR_NUMBER; // Get the PR number from the environment variable
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            // Filter comments by github-actions bot
            const botComments = comments.filter(comment => comment.user.login === 'github-actions[bot]');

            if (botComments.length === 0) {
              throw new Error('No comments found from GitHub Actions bot.');
            }

            // Get the most recent comment
            const latestComment = botComments[botComments.length - 1].body;
            console.log(`Latest comment: ${latestComment}`);
            core.exportVariable('LATEST_COMMENT', latestComment);


      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'  

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Run Python script
        id: extract-versions
        run: |
          python .github/scripts/parse_new_versions.py 
        env:
          LATEST_COMMENT: ${{ env.LATEST_COMMENT }}
      
      - name: Tag steps with new versions
        run: |
          # Set git configurations if needed
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Get versions from previous step
          versions='${{ steps.extract-versions.outputs.steps_versions }}'
          
          # Debug: Show received versions
          echo "Received versions JSON:"
          echo "$versions" | jq '.'
          
          # Process each version
          echo "$versions" | jq -c '.[]' | while IFS= read -r version_pair; do
            # Extract step and version using jq
            step=$(echo "$version_pair" | jq -r '.[0]')
            new_version=$(echo "$version_pair" | jq -r '.[1]')
            
            echo "Processing: Step=$step, Version=$new_version"
            
            # Create tag name
            tag_name="${step}-v${new_version}"
            echo "Creating tag: $tag_name"
            
            # Check if tag already exists locally
            if git rev-parse "$tag_name" >/dev/null 2>&1; then
              echo "Tag $tag_name already exists locally. Deleting..."
              git tag -d "$tag_name"
            fi
            
            # Create new tag
            if git tag "$tag_name"; then
              echo "Successfully created tag $tag_name"
            else
              echo "Failed to create tag $tag_name"
              exit 1
            fi
            
            # Push the tag with force in case it exists remotely
            if git push origin "$tag_name" --force; then
              echo "Successfully pushed tag $tag_name to origin"
            else
              echo "Failed to push tag $tag_name to origin"
              exit 1
            fi
            
            echo "âœ… Completed processing for $tag_name"
          done
          
          # Verify final tags
          echo "Final list of tags:"
          git tag -l

  shell: bash

      - name: List created tags
        run: |
          git tag -l